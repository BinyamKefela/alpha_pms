# Generated by Django 4.2.20 on 2025-04-13 14:24

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import pms.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=30, null=True)),
                ('middle_name', models.CharField(max_length=30, null=True)),
                ('last_name', models.CharField(max_length=30, null=True)),
                ('phone_number', models.CharField(max_length=100, null=True)),
                ('address', models.CharField(max_length=100, null=True)),
                ('profile_picture', models.FileField(blank=True, null=True, upload_to=pms.models.get_upload_path, validators=[pms.models.validate_uploaded_image_extension])),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', null=True, related_name='customuser_set', related_query_name='customuser', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', null=True, related_name='customuser_set', related_query_name='customuser', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=200, null=True)),
                ('status', models.CharField(max_length=100)),
                ('requested_at', models.DateTimeField(null=True)),
                ('resolved_at', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': 'maintenance_request',
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('property_type', models.CharField(max_length=100, null=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('address', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('zip_code', models.CharField(max_length=100)),
                ('price', models.FloatField()),
                ('bed_rooms', models.IntegerField(blank=True, null=True)),
                ('bath_rooms', models.IntegerField(blank=True, null=True)),
                ('rent', models.IntegerField(null=True)),
                ('status', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(null=True)),
                ('updated_at', models.DateTimeField(null=True)),
                ('manager_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='manager_id', to=settings.AUTH_USER_MODEL)),
                ('owner_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='owner_id', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'property',
            },
        ),
        migrations.CreateModel(
            name='Rent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rent_type', models.CharField(max_length=100)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('payment_cycle', models.CharField(max_length=100)),
                ('rent_amount', models.FloatField()),
                ('deposit_amount', models.FloatField()),
                ('status', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(null=True)),
                ('updated_at', models.DateTimeField(null=True)),
                ('property_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rents', to='pms.property')),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'rent',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_name', models.CharField(max_length=100)),
                ('billing_cycle', models.CharField(max_length=100)),
                ('price', models.FloatField()),
                ('start_date', models.DateTimeField()),
                ('status', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(null=True)),
                ('end_date', models.DateTimeField(null=True)),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(max_length=100)),
                ('report_data', models.CharField(max_length=900)),
                ('created_at', models.DateTimeField(null=True)),
                ('generated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('property_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pms.property')),
            ],
            options={
                'db_table': 'report',
            },
        ),
        migrations.CreateModel(
            name='RentPicture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=200, null=True)),
                ('rent_image', models.FileField(upload_to='', verbose_name=models.FileField(blank=True, null=True, upload_to=pms.models.get_rent_upload_path, validators=[pms.models.validate_uploaded_image_extension]))),
                ('rent_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pms.rent')),
            ],
            options={
                'db_table': 'rent_picture',
            },
        ),
        migrations.CreateModel(
            name='PropertyPicture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=200, null=True)),
                ('property_image', models.FileField(blank=True, null=True, upload_to=pms.models.get_property_upload_path, validators=[pms.models.validate_uploaded_image_extension])),
                ('property_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='property_pictures', to='pms.property')),
            ],
            options={
                'db_table': 'property_picture',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(null=True)),
                ('due_date', models.DateTimeField()),
                ('status', models.CharField(max_length=100)),
                ('payment_method', models.CharField(max_length=100)),
                ('transaction_id', models.CharField(max_length=100, null=True)),
                ('created_at', models.DateTimeField(null=True)),
                ('updated_at', models.DateTimeField(null=True)),
                ('rent_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pms.rent')),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'payment',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('maintenance_request_created', 'maintenance request created'), ('maintenance_request_resolved', 'maintenance request resolved'), ('rent_over_due', 'rent over due'), ('payment_complete', 'payment complete')], max_length=100)),
                ('message', models.CharField(max_length=200)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField()),
                ('read_at', models.DateTimeField(null=True)),
                ('maintenance_request_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pms.maintenancerequest')),
                ('payment_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pms.payment')),
                ('rent_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pms.rent')),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='maintenancerequest',
            name='property_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pms.property'),
        ),
        migrations.AddField(
            model_name='maintenancerequest',
            name='user_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='SubscriptionPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_method', models.CharField(max_length=100)),
                ('amount', models.FloatField()),
                ('status', models.CharField(max_length=100)),
                ('transaction_id', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(null=True)),
                ('end_date', models.DateTimeField(null=True)),
                ('subscription_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pms.subscription')),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('transaction_id',)},
            },
        ),
    ]
